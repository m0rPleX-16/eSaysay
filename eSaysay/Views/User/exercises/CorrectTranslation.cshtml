@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager
@model eSaysay.Models.Entities.InteractiveExercise
@{
    ViewData["Title"] = "Correct Translation";
    ViewData["PageClass"] = "CorrectTranslation-Page";
}

<div class="container correct-exercise">
    <div class="header-correct d-flex justify-content-end">
        <a asp-controller="Dashboard" asp-action="LessonDetails" asp-route-id="@Model.LessonID" class="btn close-button-correct">
            <span class="material-symbols-rounded">
                close
            </span>
        </a>
        <div class="progress-bar"><div class="progress-bar-inner"></div></div>
    </div>

    <div class="title title-question">Select the correct translation</div>
    <center><div class="container correct-content"><h6>@Model.ContentTranslate</h6></div></center>

    <!-- Form for submitting the answer -->
    <form id="answer-form">
        @Html.AntiForgeryToken()
        <input type="hidden" name="UserID" value="@UserManager.GetUserId(User)" />
        <input type="hidden" name="ExerciseID" value="@Model.ExerciseID" />
        <input type="hidden" name="IsCorrect" id="is-correct" value="false" />
        <input type="hidden" name="UserAnswer" id="user-answer" value="" />
        <input type="hidden" name="TimeSpent" id="time-spent" value="0" />

        <!-- Dynamic Answer Grid -->
        <div class="container answer-grid" id="answer-grid">
            @if (!string.IsNullOrEmpty(Model.AnswerChoices))
            {
                var choices = Model.AnswerChoices.Split(',').Select(c => c.Trim()).ToList();
                for (int i = 0; i < choices.Count; i++)
                {
                    <button type="button" class="corr-ans" onclick="selectAnswer(this, '@choices[i]')">@choices[i]</button>
                }
            }
            else
            {
                <p>No answer choices available.</p>
            }
        </div>
        <hr class="corr-hr" />
        <div class="footer corr-footer">
            <button type="button" class="skip" onclick="skip()">Skip</button>
            <button type="button" class="check" onclick="checkAnswer()">Check</button>
        </div>
    </form>
</div>

<!-- Success Modal -->
<div class="success-container">
<div id="successModal" class="modal">
    <div class="modal-content">
            <span class="close" style="display: none;">&times;</span>
        <h4>Success!</h4>
        <p>Your response has been saved successfully.</p>
            <button id="goToLessonDetails" class="btn mt-3 btn-return-exercise">Return</button>
    </div>
</div>
</div>


<script>
    document.addEventListener("DOMContentLoaded", function () {
        startTime = new Date().getTime(); // Capture start time in milliseconds
        let allottedTime = 10; // Set allotted time
        let progressBar = document.querySelector(".progress-bar-inner");

        progressBar.style.transition = `width ${allottedTime}s linear`;
        progressBar.style.width = "100%"; // Progress bar starts filling

        setTimeout(() => {
            progressBar.style.width = "0%"; // Reset when time is up
        }, allottedTime * 1000);
    });

    function selectAnswer(button, answer) {
        const userAnswerInput = document.getElementById("user-answer");
        const isCorrectInput = document.getElementById("is-correct");

        // Remove 'selected' class from all buttons
        document.querySelectorAll('#answer-grid button').forEach(btn => btn.classList.remove('selected'));

        // Toggle selection
        if (button.classList.contains("selected")) {
            button.classList.remove("selected");
            userAnswerInput.value = "";
            isCorrectInput.value = "false";
        } else {
            button.classList.add("selected");
            userAnswerInput.value = answer;

            // Check if the selected answer is correct
            const correctAnswer = "@Model.CorrectAnswer".toLowerCase();
            isCorrectInput.value = answer.toLowerCase() === correctAnswer;
        }
    }

    function checkAnswer() {
        const selectedAnswer = document.getElementById("user-answer").value;
        if (!selectedAnswer) {
            alert('Please select an answer first!');
            return;
        }

        let timeSpent = Math.floor((new Date().getTime() - startTime) / 1000); // Calculate time spent
        const formData = new FormData(document.getElementById("answer-form"));
        formData.append("TimeSpent", timeSpent);

        fetch('/Dashboard/SaveUserResponse', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showSuccessModal();
            } else {
                alert(data.message);
            }
        })
        .catch(error => {
            console.error("Error saving response:", error);
            alert("An error occurred while saving your response. Please try again.");
        });
    }

    // Success Modal Functions
    const successModal = document.getElementById("successModal");
    const closeModal = document.querySelector(".close");
    const goToLessonDetails = document.getElementById("goToLessonDetails");

    function showSuccessModal() {
        successModal.style.display = "block";
    }

    function hideSuccessModal() {
        successModal.style.display = "none";
    }

    closeModal.onclick = hideSuccessModal;
    window.onclick = function (event) {
        if (event.target === successModal) hideSuccessModal();
    };


    document.getElementById("goToLessonDetails").onclick = function () {
        const lessonId = "@Model.LessonID";
        window.location.href = `/Dashboard/LessonDetails/${lessonId}`;
    };

    function skip() {
        if (confirm("Are you sure you want to skip this exercise?")) {
            window.location.href = "/Dashboard/Index";
        }
    }
</script>
