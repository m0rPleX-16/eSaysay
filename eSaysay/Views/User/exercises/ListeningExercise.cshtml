@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager
@model eSaysay.Models.Entities.InteractiveExercise
@{
    ViewData["Title"] = "Listening Exercise";
    ViewData["PageClass"] = "ListeningExercise-Page";
}

<div class="container listening-exercise">
    <div class="header-listening d-flex justify-content-end">
        <a asp-controller="Dashboard" asp-action="LessonDetails" asp-route-id="@Model.LessonID" class="btn close-button-listening">
            <span class="material-symbols-rounded">
                close
            </span>
        </a>
        <div class="progress-bar"><div class="progress-bar-inner"></div></div>
    </div>

    <div class="title title-question">What does this sound make?</div>

    <div class="list-question row">
        <div class="col">
            <div class="justify-content-end audio-container">
                <button class="button" onclick="playAudio()">
                    <span class="material-symbols-rounded">
                        volume_up
                    </span>
                </button>
            </div>
        </div>
        <div class="col">
            <div class="justify-content-start container listening-content">
                <h6 id="content-text">@Model.Content</h6>
            </div>
        </div>
    </div>

    <!-- Form for submitting the answer -->
    <form id="answer-form">
        @Html.AntiForgeryToken()
        <input type="hidden" name="UserID" value="@UserManager.GetUserId(User)" />
        <input type="hidden" name="ExerciseID" value="@Model.ExerciseID" />
        <input type="hidden" name="IsCorrect" id="is-correct" value="false" />
        <input type="hidden" name="UserAnswer" id="user-answer" value="" />

        <!-- Dynamic Answer Grid -->
        <div class="container answer-grid" id="answer-grid">
            @if (!string.IsNullOrEmpty(Model.AnswerChoices))
            {
                var choices = Model.AnswerChoices.Split(',').Select(c => c.Trim()).ToList();
                foreach (var choice in choices)
                {
                    <button type="button" class="list-ans" onclick="selectAnswer('@choice', event)">@choice</button>
                }
            }
            else
            {
                <p>No answer choices available.</p>
            }
        </div>

        <hr class="list-hr" />
        <div class="footer list-footer">
            <button type="button" class="skip" onclick="skip()">Skip</button>
            <button type="button" class="check" onclick="checkAnswer()">Check</button>
        </div>
    </form>
</div>

<!-- Success Modal -->
<div class="success-container">
    <div id="successModal" class="modal">
        <div class="modal-content">
            <span class="close" style="display: none;">&times;</span>
            <h2>Success!</h2>
            <p>Your response has been saved successfully.</p>
            <button id="goToLessonDetails" class="btn mt-3 btn-return-exercise">Return</button>
        </div>
    </div>
</div>


<script src="https://code.responsivevoice.org/responsivevoice.js?key=OEKkx4ur"></script>
<script>
    function playAudio() {
        const text = document.getElementById("content-text").innerText;
        responsiveVoice.speak(text, "Korean Female", {
            onstart: () => console.log("Audio started"),
            onend: () => console.log("Audio ended")
        });
    }

    function selectAnswer(answer, event) {
        const userAnswerInput = document.getElementById("user-answer");
        const isCorrectInput = document.getElementById("is-correct");
        const clickedButton = event.target;

        // Remove the 'selected' class from all buttons
        document.querySelectorAll('#answer-grid button').forEach(button => {
            button.classList.remove('selected');
        });

        // Toggle the 'selected' class on the clicked button
        if (!clickedButton.classList.contains("selected")) {
            clickedButton.classList.add("selected");
            userAnswerInput.value = answer;
            isCorrectInput.value = (answer.toLowerCase() === "@Model.CorrectAnswer".toLowerCase());
        } else {
            clickedButton.classList.remove("selected");
            userAnswerInput.value = "";
            isCorrectInput.value = "false";
        }
    }

    function checkAnswer() {
        const selectedAnswer = document.getElementById("user-answer").value;
        if (!selectedAnswer) {
            alert('Please select an answer first!');
            return;
        }

        let endTime = new Date().getTime();
        let timeSpent = Math.floor((endTime - startTime) / 1000);

        const formData = new FormData(document.getElementById("answer-form"));
        formData.append("TimeSpent", timeSpent);

        fetch('/Dashboard/SaveUserResponse', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showSuccessModal();
            } else {
                alert(data.message);
            }
        })
        .catch(error => {
            console.error("Error saving response:", error);
            alert("An error occurred while saving your response. Please try again.");
        });
    }

    function showSuccessModal() {
        document.getElementById("successModal").style.display = "block";
    }

    function hideSuccessModal() {
        document.getElementById("successModal").style.display = "none";
    }

    document.getElementsByClassName("close")[0].onclick = hideSuccessModal;
    window.onclick = function (event) {
        if (event.target === document.getElementById("successModal")) {
            hideSuccessModal();
        }
    };

    document.getElementById("goToLessonDetails").onclick = function () {
        const lessonId = "@Model.LessonID";
        window.location.href = `/Dashboard/LessonDetails/${lessonId}`;
    };

    document.addEventListener("DOMContentLoaded", function () {
        startTime = new Date().getTime();
        let allottedTime = 10;
        let progressBar = document.querySelector(".progress-bar-inner");

        progressBar.style.transition = `width ${allottedTime}s linear`;
        progressBar.style.width = "100%";

        setTimeout(() => {
            progressBar.style.width = "0%";
        }, allottedTime * 1000);
    });

    function skip() {
        if (confirm("Are you sure you want to skip this exercise?")) {
            window.location.href = "/Dashboard/Index";
        }
    }
</script>