@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager
@model eSaysay.Models.Entities.InteractiveExercise
@{
    ViewData["Title"] = "Listening Exercise";
    ViewData["PageClass"] = "ListeningExercise-Page";
}

<div class="container listening-exercise">
    <div class="header-listening">
        <a asp-controller="Dashboard" asp-action="LessonDetails" asp-route-id="@Model.LessonID" class="btn close-button-listening">
            <span class="material-symbols-rounded">
                close
            </span>
        </a>
        <div class="progress-bar"><div class="progress-bar-inner"></div></div>
    </div>

    
    <div class="title title-question">What does this sound make?</div>

    <div class="list-question row">
        <div class="col">
            <div class="justify-content-end audio-container">
                <button class="button" onclick="playAudio()">
                    <span class="material-symbols-rounded">
                        volume_up
                    </span>
                </button>
            </div>

        </div>
     <div class="col">
            <div class="justify-content-start container listening-content">
                <h6 id="content-text">@Model.Content</h6>
            </div>
     </div>
        
        
       
    </div>
   

    <!-- Form for submitting the answer -->
    <form id="answer-form">
        <input type="hidden" name="UserID" value="@UserManager.GetUserId(User)" />
        <input type="hidden" name="ExerciseID" value="@Model.ExerciseID" />
        <input type="hidden" name="IsCorrect" id="is-correct" value="false" />
        <input type="hidden" name="UserAnswer" id="user-answer" value="" />

        <!-- Dynamic Answer Grid -->
        <div class="container answer-grid" id="answer-grid">
            @if (!string.IsNullOrEmpty(Model.AnswerChoices))
            {
                var choices = Model.AnswerChoices.Split(',').Select(c => c.Trim()).ToList();
                for (int i = 0; i < choices.Count; i++)
                {
                    <button type="button" class="list-ans" onclick="selectAnswer('@choices[i]')">@choices[i]</button>
                }
            }
            else
            {
                <p>No answer choices available.</p>
            }
        </div>

       
        <hr class="list-hr" />
        <div class="footer list-footer">
            <button type="button" class="skip" onclick="skip()">Skip</button>
            <button type="button" class="check" onclick="checkAnswer()">Check</button>
        </div>
    </form>
</div>

<!-- Success Modal -->
<div id="successModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h2>🎉 Success!</h2>
        <p>Your response has been saved successfully.</p>
        <button id="goToDashboard" class="btn btn-primary">Go to Dashboard</button>
    </div>
</div>

<!-- Modal Styles -->
<style>
    .completion-input {
        margin-top: 15px;
        text-align: center;
    }

        .completion-input input {
            width: 80%;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }
</style>

<script src="https://code.responsivevoice.org/responsivevoice.js?key=OEKkx4ur"></script>
<script>
    function playAudio() {
        const text = document.getElementById("content-text").innerText;
        responsiveVoice.speak(text, "Korean Female", {
            onstart: () => console.log("Audio started"),
            onend: () => console.log("Audio ended")
        });
    }

    function selectAnswer(answer) {
        document.getElementById("user-answer").value = answer;
        const correctAnswer = "@Model.CorrectAnswer".toLowerCase();
        const isCorrect = answer.toLowerCase() === correctAnswer;
        document.getElementById("is-correct").value = isCorrect;
        document.querySelectorAll('#answer-grid button').forEach(button => button.classList.remove('selected'));
        event.target.classList.add('selected');
    }

    function updateCompletionAnswer() {
        document.getElementById("user-answer").value = document.getElementById("completion-answer").value;
    }

    function checkAnswer() {
        const selectedAnswer = document.getElementById("user-answer").value;
        if (!selectedAnswer) {
            alert('Please select or type an answer first!');
            return;
        }

        const formData = new FormData(document.getElementById("answer-form"));

        fetch('/Dashboard/SaveUserResponse', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showSuccessModal();
            } else {
                alert(data.message);
            }
        })
        .catch(error => {
            console.error("Error saving response:", error);
            alert("An error occurred while saving your response. Please try again.");
        });
    }

    const successModal = document.getElementById("successModal");
    const closeModal = document.getElementsByClassName("close")[0];
    const goToDashboard = document.getElementById("goToDashboard");

    function showSuccessModal() {
        successModal.style.display = "block";
    }

    function hideSuccessModal() {
        successModal.style.display = "none";
    }

    closeModal.onclick = hideSuccessModal;
    window.onclick = function (event) {
        if (event.target === successModal) {
            hideSuccessModal();
        }
    };

    goToDashboard.onclick = function () {
        window.location.href = "/Dashboard/Index";
    };
</script>
