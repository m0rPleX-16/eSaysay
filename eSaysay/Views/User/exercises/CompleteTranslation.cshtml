@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager
@model eSaysay.Models.Entities.InteractiveExercise
@{
    ViewData["Title"] = "Complete Translation";
    ViewData["PageClass"] = "CompleteTranslation-Page";
}

<div class="container complete-exercise">
    <div class="header-complete d-flex justify-content-end">
      
        <a asp-controller="Dashboard" asp-action="LessonDetails" asp-route-id="@Model.LessonID" class="btn close-button-complete">
            <span class="material-symbols-rounded">
                close
            </span>
        </a>
        <div class="progress-bar"><div class="progress-bar-inner"></div></div>
    </div>

    <div class="title title-question">Complete the translation</div>
    
    <!--THE QUESTION-->
    <center class="container-complete-content">
        <div class="container complete-content">
            <h6>@Model.ContentTranslate</h6>
            </div>
    </center>


<!-- Success Modal -->
<div class="success-container">
        <div id="successModal" class="modal comp-success-modal">
            <div class="modal-content">
                <span class="close" style="display: none;">&times;</span>
                <h4>Success!</h4>
                <p>Your response has been saved successfully.</p>
                <button id="goToLessonDetails" class="btn mt-3 btn-return-exercise">Return</button>
            </div>
        </div>
</div>


<!-- Form for submitting the answer -->
<form id="answer-form">
        @Html.AntiForgeryToken()
    <input type="hidden" name="UserID" value="@UserManager.GetUserId(User)" />
    <input type="hidden" name="ExerciseID" value="@Model.ExerciseID" />
    <input type="hidden" name="IsCorrect" id="is-correct" value="false" />
    <input type="hidden" name="UserAnswer" id="user-answer" value="" />

    <!-- Dynamic Answer Grid -->
    <div class="container answer-grid" id="answer-grid">
        @if (!string.IsNullOrEmpty(Model.AnswerChoices))
        {
            var choices = Model.AnswerChoices.Split(',').Select(c => c.Trim()).ToList();
            foreach (var choice in choices)
            {
                <button type="button" class="comp-ans" onclick="selectAnswer('@choice')">@choice</button>
            }
        }
        else
        {
            <p>No answer choices available.</p>
        }
    </div>
    <hr class="comp-hr"/>
    <div class="footer comp-footer">
        <button type="button" class="skip comp-skip"  onclick="skip()">Skip</button>
        <button type="button" class="check comp-check" onclick="checkAnswer()">Check</button>
    </div>
</form>

</div>

<script>
    let startTime; // Variable to store start time

    document.addEventListener("DOMContentLoaded", function () {
        startTime = new Date().getTime(); // Capture start time in milliseconds

        let allottedTime = 10; // Set allotted time
        let progressBar = document.querySelector(".progress-bar-inner");

        progressBar.style.transition = `width ${allottedTime}s linear`;
        progressBar.style.width = "100%"; // Progress bar starts filling

        setTimeout(() => {
            progressBar.style.width = "0%"; // Reset when time is up
        }, allottedTime * 1000);
    });
    function selectAnswer(answer) {
        const userAnswerInput = document.getElementById("user-answer");
        const isCorrectInput = document.getElementById("is-correct");
        const clickedButton = event.target; // Get the clicked button

        // Check if the button is already selected
        if (clickedButton.classList.contains("selected")) {
            // Unselect the button
            clickedButton.classList.remove("selected");
            userAnswerInput.value = ""; // Clear the selected answer
            isCorrectInput.value = "false"; // Reset correctness
        } else {
            // Remove 'selected' class from all buttons
            const buttons = document.querySelectorAll('#answer-grid button');
            buttons.forEach(button => {
                button.classList.remove('selected');
            });

            // Select the clicked button
            clickedButton.classList.add("selected");
            userAnswerInput.value = answer;

            // Check if the selected answer is correct
            const correctAnswer = "@Model.CorrectAnswer".toLowerCase();
            const isCorrect = answer.toLowerCase() === correctAnswer;
            isCorrectInput.value = isCorrect;
        }
    }

    // Function to check the answer
    function checkAnswer() {
        const selectedAnswer = document.getElementById("user-answer").value;

        if (!selectedAnswer) {
            alert('Please select an answer first!');
            return;
        }

        let endTime = new Date().getTime(); // Capture end time
        let timeSpent = Math.floor((endTime - startTime) / 1000); // Convert to seconds

        const formData = new FormData(document.getElementById("answer-form"));
        formData.append("TimeSpent", timeSpent); // Append time spent

        fetch('/Dashboard/SaveUserResponse', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showSuccessModal(); // Show success modal
            } else {
                alert(data.message);
            }
        })
        .catch(error => {
            console.error("Error saving response:", error);
            alert("An error occurred while saving your response. Please try again.");
        });
    }

    // Modal Functions
    const successModal = document.getElementById("successModal");
    const closeModal = document.getElementsByClassName("close")[0];
    const goToLessonDetails = document.getElementById("goToLessonDetails");

    function showSuccessModal() {
        successModal.style.display = "block";
    }

    function hideSuccessModal() {
        successModal.style.display = "none";
    }

    closeModal.onclick = hideSuccessModal;
    window.onclick = function (event) {
        if (event.target === successModal) {
            hideSuccessModal();
        }
    };

    document.getElementById("goToLessonDetails").onclick = function () {
        const lessonId = "@Model.LessonID";
        window.location.href = `/Dashboard/LessonDetails/${lessonId}`;
    };


    document.addEventListener("DOMContentLoaded", function () {
        let allottedTime = 10; // Change this to the actual allotted time in seconds
        let progressBar = document.querySelector(".progress-bar-inner");

        progressBar.style.transition = `width ${allottedTime}s linear`;
        progressBar.style.width = "100%"; // Fill up over allotted time

        setTimeout(() => {
            progressBar.style.width = "0%"; // Reset when time is up
        }, allottedTime * 1000);
    });

    function skip() {
        if (confirm("Are you sure you want to skip this exercise?")) {
            window.location.href = "/Dashboard/Index";
        }
    }
</script>