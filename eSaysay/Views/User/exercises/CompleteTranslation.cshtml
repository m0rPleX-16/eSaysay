@using Microsoft.AspNetCore.Identity
@inject UserManager<IdentityUser> UserManager
@model eSaysay.Models.Entities.InteractiveExercise
@{
    ViewData["Title"] = "Complete Translation";
    ViewData["PageClass"] = "CompleteTranslation-Page";
}

<div class="container complete-exercise">
    <div class="header-complete">
      
        <a asp-controller="Dashboard" asp-action="LessonDetails" asp-route-id="@Model.LessonID" class="btn close-button-complete">
            <span class="material-symbols-rounded">
                close
            </span>
        </a>
        <div class="progress-bar"><div class="progress-bar-inner"></div></div>
    </div>

    <div class="title title-question">Complete the translation</div>
    <center>
        <div class="container complete-content"><h6>@Model.ContentTranslate</h6></div>
    </center>
</div>

<!-- Success Modal -->
<div id="successModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h2>🎉 Success!</h2>
        <p>Your response has been saved successfully.</p>
        <button id="goToDashboard" class="btn btn-primary">Go to Dashboard</button>
    </div>
</div>

<!-- Form for submitting the answer -->
<form id="answer-form">
    <input type="hidden" name="UserID" value="@UserManager.GetUserId(User)" />
    <input type="hidden" name="ExerciseID" value="@Model.ExerciseID" />
    <input type="hidden" name="IsCorrect" id="is-correct" value="false" />
    <input type="hidden" name="UserAnswer" id="user-answer" value="" />

    <!-- Dynamic Answer Grid -->
    <div class="container answer-grid" id="answer-grid">
        @if (!string.IsNullOrEmpty(Model.AnswerChoices))
        {
            var choices = Model.AnswerChoices.Split(',').Select(c => c.Trim()).ToList();
            foreach (var choice in choices)
            {
                <button type="button" onclick="selectAnswer('@choice')">@choice</button>
            }
        }
        else
        {
            <p>No answer choices available.</p>
        }
    </div>

    <div class="footer">
        <button type="button" class="skip" onclick="skip()">Skip</button>
        <button type="button" class="check" onclick="checkAnswer()">Check</button>
    </div>
</form>
</div>

<!-- Modal Styles -->
<style>
    .progress-bar {
        width: 100%;
        height: 10px;
        background-color: #e0e0e0;
        border-radius: 5px;
        overflow: hidden;
        margin: 10px 0;
    }

    .progress-bar-inner {
        width: 0%;
        height: 100%;
        background-color: #4caf50;
        transition: width 1s linear;
    }
    /* Modal Styles */
    .modal {
        display: none; /* Hidden by default */
        position: fixed; /* Stay in place */
        z-index: 1000; /* Sit on top */
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto; /* Enable scroll if needed */
        background-color: rgba(0, 0, 0, 0.5); /* Black with opacity */
    }

    .modal-content {
        background-color: white;
        margin: 15% auto; /* 15% from the top and centered */
        padding: 20px;
        border: 1px solid #888;
        border-radius: 10px;
        width: 80%; /* Responsive width */
        max-width: 400px; /* Max width */
        text-align: center;
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

    .btn-primary {
        background-color: #4CAF50; /* Green */
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

        .btn-primary:hover {
            background-color: #45a049; /* Darker green */
        }

    /* Selected Answer Style */
    .selected {
        background-color: #4CAF50; /* Green background */
        color: white; /* White text */
        border: 2px solid #45a049;
    }
</style>

<script>
    let startTime; // Variable to store start time

    document.addEventListener("DOMContentLoaded", function () {
        startTime = new Date().getTime(); // Capture start time in milliseconds

        let allottedTime = 10; // Set allotted time
        let progressBar = document.querySelector(".progress-bar-inner");

        progressBar.style.transition = `width ${allottedTime}s linear`;
        progressBar.style.width = "100%"; // Progress bar starts filling

        setTimeout(() => {
            progressBar.style.width = "0%"; // Reset when time is up
        }, allottedTime * 1000);
    });
    // Function to select an answer
    function selectAnswer(answer) {
        document.getElementById("user-answer").value = answer;

        // Check if the selected answer is correct
        const correctAnswer = "@Model.CorrectAnswer".toLowerCase();
        const isCorrect = answer.toLowerCase() === correctAnswer;

        // Set the IsCorrect value in the hidden input
        document.getElementById("is-correct").value = isCorrect;

        // Highlight the selected button
        const buttons = document.querySelectorAll('#answer-grid button');
        buttons.forEach(button => {
            button.classList.remove('selected');
        });
        event.target.classList.add('selected');
    }

    // Function to check the answer
    function checkAnswer() {
        const selectedAnswer = document.getElementById("user-answer").value;

        if (!selectedAnswer) {
            alert('Please select an answer first!');
            return;
        }

        let endTime = new Date().getTime(); // Capture end time
        let timeSpent = Math.floor((endTime - startTime) / 1000); // Convert to seconds

        const formData = new FormData(document.getElementById("answer-form"));
        formData.append("TimeSpent", timeSpent); // Append time spent

        fetch('/Dashboard/SaveUserResponse', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showSuccessModal(); // Show success modal
            } else {
                alert(data.message);
            }
        })
        .catch(error => {
            console.error("Error saving response:", error);
            alert("An error occurred while saving your response. Please try again.");
        });
    }

    // Modal Functions
    const successModal = document.getElementById("successModal");
    const closeModal = document.getElementsByClassName("close")[0];
    const goToDashboard = document.getElementById("goToDashboard");

    function showSuccessModal() {
        successModal.style.display = "block";
    }

    function hideSuccessModal() {
        successModal.style.display = "none";
    }

    closeModal.onclick = hideSuccessModal;
    window.onclick = function (event) {
        if (event.target === successModal) {
            hideSuccessModal();
        }
    };

    goToDashboard.onclick = function () {
        window.location.href = "/Dashboard/Index";
    };

    document.addEventListener("DOMContentLoaded", function () {
        let allottedTime = 10; // Change this to the actual allotted time in seconds
        let progressBar = document.querySelector(".progress-bar-inner");

        progressBar.style.transition = `width ${allottedTime}s linear`;
        progressBar.style.width = "100%"; // Fill up over allotted time

        setTimeout(() => {
            progressBar.style.width = "0%"; // Reset when time is up
        }, allottedTime * 1000);
    });
</script>