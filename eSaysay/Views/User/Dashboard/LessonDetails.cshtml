@model List<eSaysay.Models.Entities.InteractiveExercise>
@{
    var lesson = ViewBag.Lesson as eSaysay.Models.Entities.Lesson;
    ViewData["Title"] = $"{lesson.Title} - Exercises";


}

<div class="lesson-details-container">
    <h2 class="lesson-title">@lesson.Title</h2>
    <p class="lesson-description">@lesson.Description</p>

    @if (Model == null || !Model.Any(e => !e.IsArchived))
    {
        <p class="text-muted">No exercises available for this lesson.</p>
    }
    else
    {
        <!-- Dropdown for filtering -->
        <div class="filter-container ">
            <label for="exerciseFilter" class="filter-label">Filter:</label>
            <select id="exerciseFilter" class="filter-dropdown form-control" onchange="filterExercises()">
                <option value="all"><p>All</p></option>
                <option value="not-started"><p>Not Started</p></option>
                <option value="in-progress"><p>In Progress</p></option>
                <option value="completed"><p>Completed</p></option>
            </select>
        </div>

        <div class="carousel-wrapper">
            <button class="carousel-control prev" onclick="moveSlide(-1)">&#10094;</button>
            <div class="carousel">
                <div class="exercise-list">
                    @foreach (var exercise in Model.Where(e => !e.IsArchived)) // ✅ Exclude archived exercises
                    {
                        var isCompleted = ViewBag.CompletedExercises != null && ViewBag.CompletedExercises.Contains(exercise.ExerciseID);
                        var isStarted = ViewBag.StartedExercises != null && ViewBag.StartedExercises.Contains(exercise.ExerciseID);
                        var statusClass = isCompleted ? "completed-exercise" : isStarted ? "started-exercise" : "not-started-exercise";

                        <div class="exercise-card @statusClass" data-status="@statusClass">
                            @if (isCompleted)
                            {
                                <div class="badge badge-success">Completed</div>
                            }
                            else if (isStarted)
                            {
                                <div class="badge badge-warning">In Progress</div>
                            }

                            <h3 class="exercise-type">@exercise.ExerciseType</h3>
                            <p class="exercise-content">@exercise.Content</p>
                            <a asp-controller="Dashboard" asp-action="StartExercise" asp-route-exerciseId="@exercise.ExerciseID" class="btn btn-start">
                                @(isCompleted ? "Review Exercise" : "Start Exercise")
                            </a>
                        </div>
                    }
                </div>
            </div>
            <button class="carousel-control next" onclick="moveSlide(1)">&#10095;</button>
        </div>
    }
    <div class="btn-area mb-3">
        <a asp-controller="Dashboard" asp-action="Index" class="btn btn-back">Back to Lessons</a>
    </div>
    
</div>

<style>
    .completed-exercise {
        opacity: 0.5;
        pointer-events: none;
    }

    .started-exercise {
        border: 2px solid orange;
    }

    .not-started-exercise {
        border: 2px solid #DFB757;
    }

    .badge {
        padding: 5px;
        color: white;
        font-size: 12px;
        position: absolute;
        top: 10px;
        right: 10px;
    }

    .badge-success {
        background-color: green;
    }

    .badge-warning {
        background-color: orange;
    }
</style>

<script>
  
        function filterExercises() {
            var filter = document.getElementById("exerciseFilter").value;
            var exercises = document.querySelectorAll(".exercise-card");

            exercises.forEach(function (exercise) {
                var status = exercise.classList.contains("completed-exercise")
                    ? "completed"
                    : exercise.classList.contains("started-exercise")
                    ? "in-progress"
                    : "not-started";

                exercise.style.display = (filter === "all" || status === filter) ? "block" : "none";
            });
        }
    
    let currentIndex = 0;

function moveSlide(direction) {
    const exerciseList = document.querySelector('.exercise-list');
    const cards = document.querySelectorAll('.exercise-card');
    const totalCards = cards.length;

    // Calculate new index with wrap-around logic
    currentIndex = (currentIndex + direction + totalCards) % totalCards;

    // Scroll the carousel smoothly
    const cardWidth = cards[0].offsetWidth + 16; // Including margin
    exerciseList.style.transition = 'transform 0.5s ease-in-out';
    exerciseList.style.transform = `translateX(-${currentIndex * cardWidth}px)`;

    // Handle seamless looping
    if (currentIndex === 0 && direction === -1) {
        setTimeout(() => {
            exerciseList.style.transition = 'none';
            exerciseList.style.transform = `translateX(-${(totalCards - 1) * cardWidth}px)`;
            setTimeout(() => {
                exerciseList.style.transition = 'transform 0.5s ease-in-out';
                currentIndex = totalCards - 1;
            }, 50);
        }, 500);
    } else if (currentIndex === totalCards - 1 && direction === 1) {
        setTimeout(() => {
            exerciseList.style.transition = 'none';
            exerciseList.style.transform = `translateX(0)`;
            setTimeout(() => {
                exerciseList.style.transition = 'transform 0.5s ease-in-out';
                currentIndex = 0;
            }, 50);
        }, 500);

  

    }
}

document.addEventListener("DOMContentLoaded", function () {
    const exerciseList = document.querySelector('.exercise-list');
    const cards = document.querySelectorAll('.exercise-card');

    // Duplicate the first and last cards for seamless looping
    const cloneFirst = cards[0].cloneNode(true);
    const cloneLast = cards[cards.length - 1].cloneNode(true);

    exerciseList.appendChild(cloneFirst);
    exerciseList.insertBefore(cloneLast, cards[0]);

    // Adjust initial position to show the first card
    const cardWidth = cards[0].offsetWidth + 16; // Including margin
    exerciseList.style.transform = `translateX(-${cardWidth}px)`;
    currentIndex = 1;
});
</script>
