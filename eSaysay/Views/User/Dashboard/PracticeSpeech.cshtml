@{
    ViewData["Title"] = "Speech Assessment";
}

<!-- Dashboard Content of User -->
<div class="user-dashboard">
    @await Html.PartialAsync("_Sidebar")

    <main class="main-content user-dashboard">
        @await Html.PartialAsync("_NavbarAuthenticated")

        <div class="container mt-4">
            <h2 class="text-center">Practice Your Speech</h2>

            <div class="card p-3 shadow">
                <p><strong>Instruction:</strong> Click the microphone and read the given text aloud.</p>
                <h4 id="practice-text" class="text-primary"></h4>

                <div class="text-center mt-3">
                    <button id="start-recording" class="btn btn-success">🎤 Start Recording</button>
                    <button id="stop-recording" class="btn btn-danger" disabled>🛑 Stop Recording</button>
                    <p id="recording-status" class="text-danger mt-2" style="display:none;">🎙️ Recording <span id="timer">0</span>s...</p>
                </div>

                <audio id="audio-playback" controls class="mt-3" style="display:none;"></audio>

                <button id="submit-speech" class="btn btn-primary mt-3" disabled>✅ Submit for Assessment</button>

                <div id="assessment-result" class="mt-4"></div>
            </div>

            <!-- Past Recordings -->
            <div class="card p-3 shadow mt-4">
                <h4>Past Recordings</h4>
                <ul id="past-recordings" class="list-group">
                    <li class="list-group-item text-muted">Loading recordings...</li>
                </ul>
            </div>
        </div>
    </main>
</div>

@section Scripts {
    <script>
        let mediaRecorder;
        let audioChunks = [];
        let audioBlob;
        let timerInterval;
        let seconds = 0;

        const practiceTexts = [
            "Hello, welcome to eSaysay! Practice speaking clearly and confidently.",
            "The quick brown fox jumps over the lazy dog.",
            "Artificial intelligence is transforming language learning."
        ];
        document.getElementById("practice-text").textContent = practiceTexts[Math.floor(Math.random() * practiceTexts.length)];

        async function loadPastRecordings() {
            let response = await fetch("/api/speechassessment/past-recordings");
            let recordings = await response.json();
            let list = document.getElementById("past-recordings");
            list.innerHTML = "";

            if (recordings.length === 0) {
                list.innerHTML = "<li class='list-group-item text-muted'>No past recordings found.</li>";
                return;
            }

            recordings.forEach(recording => {
                let listItem = document.createElement("li");
                listItem.classList.add("list-group-item", "d-flex", "justify-content-between", "align-items-center");
                listItem.innerHTML = `
                    <audio controls src="${recording.AudioUrl}"></audio>
                    <button class="btn btn-danger btn-sm" onclick="deleteRecording(${recording.Id})">🗑️ Delete</button>
                `;
                list.appendChild(listItem);
            });
        }

        document.getElementById("start-recording").addEventListener("click", async () => {
            try {
                let stream = await navigator.mediaDevices.getUserMedia({ audio: true });
                mediaRecorder = new MediaRecorder(stream);
                audioChunks = [];
                seconds = 0;

                document.getElementById("recording-status").style.display = "block";
                timerInterval = setInterval(() => {
                    seconds++;
                    document.getElementById("timer").textContent = seconds;
                }, 1000);

                mediaRecorder.ondataavailable = event => audioChunks.push(event.data);

                mediaRecorder.onstop = () => {
                    clearInterval(timerInterval);
                    document.getElementById("recording-status").style.display = "none";
                    audioBlob = new Blob(audioChunks, { type: "audio/mp3" });
                    let audioUrl = URL.createObjectURL(audioBlob);
                    let audioElement = document.getElementById("audio-playback");
                    audioElement.src = audioUrl;
                    audioElement.style.display = "block";
                    document.getElementById("submit-speech").disabled = false;
                };

                mediaRecorder.start();
                document.getElementById("start-recording").disabled = true;
                document.getElementById("stop-recording").disabled = false;
            } catch (error) {
                alert("Microphone access denied or unavailable.");
            }
        });

        document.getElementById("stop-recording").addEventListener("click", () => {
            if (mediaRecorder) {
                mediaRecorder.stop();
            }
            document.getElementById("start-recording").disabled = false;
            document.getElementById("stop-recording").disabled = true;
        });

        document.getElementById("submit-speech").addEventListener("click", async () => {
            let formData = new FormData();
            formData.append("ExpectedText", document.getElementById("practice-text").textContent);
            formData.append("UserRecording", audioBlob);

            document.getElementById("submit-speech").disabled = true;
            document.getElementById("assessment-result").innerHTML = "<p>⏳ Assessing speech, please wait...</p>";

            try {
                let response = await fetch("/api/speechassessment/submit", {
                    method: "POST",
                    body: formData
                });

                let result = await response.json();
                document.getElementById("assessment-result").innerHTML = `
                    <h5>Assessment Results</h5>
                    <p>Accuracy Score: <strong>${result.AccuracyScore}%</strong></p>
                    <p>Feedback: ${result.Feedback}</p>
                    <p>Transcribed Text: <em>${result.TranscribedText}</em></p>
                `;

                loadPastRecordings(); // Refresh recordings
            } catch (error) {
                document.getElementById("assessment-result").innerHTML = "<p class='text-danger'>⚠️ Failed to assess speech. Please try again.</p>";
            }
        });

        async function deleteRecording(id) {
            if (!confirm("Are you sure you want to delete this recording?")) return;

            let response = await fetch(`/api/speechassessment/delete/${id}`, { method: "DELETE" });

            if (response.ok) {
                alert("Recording deleted successfully.");
                loadPastRecordings(); // Refresh list
            } else {
                alert("Failed to delete recording.");
            }
        }

        loadPastRecordings(); // Load on page load
    </script>
}
