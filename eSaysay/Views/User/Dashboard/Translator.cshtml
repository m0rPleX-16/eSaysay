@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Options
@using eSaysay.Configuration
@inject IOptions<AppSettings> AppSettings
@{
    ViewData["Title"] = "Translator";
}

<div class="user-translator">
    @await Html.PartialAsync("_Sidebar")

    <main class="main-content user-translator">
        @await Html.PartialAsync("_NavbarAuthenticated")

        <div class="translator-mssg mt-3" style="color: #274052; ">
            <h2>  Your <span class="span-dashboard">translator</span> </h2>
        </div>
        <div class="translator-container">

                <div class="translator-wrapper">

                    <div class="translator-text-input">
                        <textarea class="from-text" maxlength="1000" placeholder="Enter text here (English)" aria-label="Input text to translate"></textarea>
                    <textarea class="to-text" maxlength="1000" placeholder="Korean text here" readonly aria-label="Translated text"></textarea>
                    </div>

                    <button class="translator-swap" aria-label="Swap Languages">
                    <span class="material-symbols-rounded">
                        swap_horiz
                    </span>
                    </button>

                    <div class="translator-controls">
                        <button id="speak-from" class="icon-btn" aria-label="Listen to input text">
                        <span class="material-symbols-rounded">
                            volume_up
                        </span>
                        </button>
                        <button id="copy-from" class="icon-btn" aria-label="Copy input text">
                        <span class="material-symbols-rounded">
                            content_copy
                        </span>
                        </button>
                        <button id="copy-to" class="icon-btn" aria-label="Copy translated text">
                        <span class="material-symbols-rounded">
                            content_copy
                        </span>
                        </button>
                        <button id="speak-to" class="icon-btn" aria-label="Listen to translated text">
                        <span class="material-symbols-rounded">
                            volume_up
                        </span>
                        </button>
                    </div>

                

                </div>

                <div class="btn-translator-wrapper">
                <button id="translator-button" class="btn-primary" aria-label="Translate text">Translate</button>
                </div>
            
            
        </div>
    </main>
</div>

@section Scripts {
    <script src="@AppSettings.Value.ResponsiveVoice.ScriptUrl?key=@AppSettings.Value.ResponsiveVoice.ApiKey"></script>

    <script>
        // Configuration from appsettings
        const translationConfig = {
            apiBaseUrl: '@AppSettings.Value.TranslationApi.BaseUrl',
            defaultLangPair: '@AppSettings.Value.TranslationApi.DefaultLangPair'
        };

        const fromInput = document.querySelector(".from-text");
        const toInput = document.querySelector(".to-text");
        const translateButton = document.querySelector("#translator-button");
        const speakFrom = document.querySelector("#speak-from");
        const speakTo = document.querySelector("#speak-to");
        const copyFrom = document.querySelector("#copy-from");
        const copyTo = document.querySelector("#copy-to");
        const swapButton = document.querySelector(".translator-swap");

        async function fetchTranslation(text, fromLang, toLang) {
            if (!text) return;

            try {
                const response = await fetch(
                    `${translationConfig.apiBaseUrl}?q=${encodeURIComponent(text)}&langpair=${fromLang}|${toLang}`
                );

                if (!response.ok) throw new Error('Translation failed');

                const data = await response.json();
                return data.responseData?.translatedText || 'Translation error';
            } catch (error) {
                console.error("Translation error:", error);
                return 'Translation service unavailable';
            }
        }

        translateButton.addEventListener("click", async () => {
            const text = fromInput.value.trim();
            if (!text) return;

            const fromLang = fromInput.placeholder.includes("English") ? "en" : "ko";
            const toLang = fromLang === "en" ? "ko" : "en";
            
            translateButton.disabled = true;
            try {
                const translatedText = await fetchTranslation(text, fromLang, toLang);
                toInput.value = translatedText;
            } finally {
                translateButton.disabled = false;
            }
        });

        function speakText(text, lang) {
                    if (!text) return;
                    try {
                        const utterance = new SpeechSynthesisUtterance(text);
                        utterance.lang = lang;
                        speechSynthesis.speak(utterance);
                    } catch (error) {
                        console.error("Speech synthesis error:", error);
                    }
                }

        speakFrom.addEventListener("click", () => {
            let lang = fromInput.placeholder.includes("English") ? "en-US" : "ko-KR";
            speakText(fromInput.value, lang);
        });

        speakTo.addEventListener("click", () => {
            let lang = toInput.placeholder.includes("English") ? "en-US" : "ko-KR";
            speakText(toInput.value, lang);
        });

        copyFrom.addEventListener("click", () => {
            navigator.clipboard.writeText(fromInput.value);
        });

        copyTo.addEventListener("click", () => {
            navigator.clipboard.writeText(toInput.value);
        });

        swapButton.addEventListener("click", () => {
            let tempText = fromInput.value;
            fromInput.value = toInput.value;
            toInput.value = tempText;

            let tempPlaceholder = fromInput.placeholder;
            fromInput.placeholder = toInput.placeholder;
            toInput.placeholder = tempPlaceholder;
        });
    </script>
}
