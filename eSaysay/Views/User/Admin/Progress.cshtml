@model eSaysay.Models.ViewModels.ProgressViewModel
@{
    ViewData["Title"] = "User Progress";
}
<main class="admin-progress">
    @await Html.PartialAsync("_AdminSidebar")

    <div class="admin-progress-topbar">
        <h2>User's <span class="progress-span-dashboard">progress</span></h2>
    </div>

    <div class="progress-content">
        <!-- Summary Statistics -->
        <section class="progress-summary d-flex justify-content-between">
            <div class="progress-box">
                <h3 class="span-progress-box">@Model.TotalUsers</h3>
                <span>Total Users</span>
            </div>
            <div class="progress-box">
                <h3 class="span-progress-box">@Model.TotalLessons</h3>
                <span>Total Lessons</span>
            </div>
            <div class="progress-box">
                <h3 class="span-progress-box">@Model.CompletedLessons</h3>
                <span>Completed Lessons</span>
            </div>
            <div class="progress-box">
                <h3 class="span-progress-box">@Model.InProgressLessons</h3>
                <span>In Progress</span>
            </div>
            <div class="progress-box">
                <h3 class="span-progress-box">@Model.NotStartedLessons</h3>
                <span>Not Started</span>
            </div>
            <div class="progress-box">
                <h3 class="span-progress-box">@Model.TotalPendingLessons</h3>
                <span>Pending Lessons</span>
            </div>
            <div class="progress-box">
                <h3 class="span-progress-box">@Model.AverageScore.ToString("0.00")%</h3>
                <span>Average Score</span>
            </div>
        </section>

        <!-- User Progress Table -->
        <section class="progress-table mt-1">
            @if (Model.ProgressData != null && Model.ProgressData.Any())
            {
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>User</th>
                            <th>Lesson</th>
                            <th>Completion Status</th>
                            <th>Score</th>
                            <th>Time Spent (mins)</th>
                            <th>Last Accessed</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var progress in Model.ProgressData)
                        {
                            <tr>
                                <td>@progress.UserName</td>
                                <td>@progress.LessonName</td>
                                <td>@progress.CompletionStatus</td>
                                <td>@(progress.Score > 0 ? progress.Score.ToString("0.00") : "N/A")</td>
                                <td>@(progress.TimeSpent.HasValue ? (progress.TimeSpent.Value > 0 ? (progress.TimeSpent.Value / 60) : "0") : "N/A")</td>
                                <td>@(progress.LastAccessedDate.HasValue ? progress.LastAccessedDate.Value.ToString("yyyy-MM-dd HH:mm") : "Never")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p class="text-muted">No progress data available.</p>
            }
        </section>

        <!-- Progress Chart -->
        <section class="progress-graphs">
            <div class="user-progress-overview">
                <span class="progress-graph-span">User progress overview</span>
              
                    <canvas id="progressChart"></canvas>
               
            </div>
   
        </section>
    </div>
</main>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        var progressLabels = @Json.Serialize(Model.ProgressData?.Select(p => p.LessonName) ?? new List<string>());
        var progressScores = @Json.Serialize(Model.ProgressData?.Select(p => p.Score) ?? new List<double>());

        if (progressLabels.length === 0) {
            console.warn("No progress data available for charts.");
            document.querySelector(".progress-graphs").innerHTML = "<p class='text-muted'>No data available for charts.</p>";
            return;
        }

        var ctxProgress = document.getElementById('progressChart').getContext('2d');
        var progressChart = new Chart(ctxProgress, {
            type: 'bar',
            data: {
                labels: progressLabels,
                datasets: [{
                    label: 'Average Scores',
                    data: progressScores,
                    backgroundColor: 'rgba(223, 183, 87, 0.5)',
                    borderColor: 'rgba(223, 183, 87, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                },
                plugins: {
                    legend: {
                        labels: {
                            font: {
                                family: 'Poppins', // Change to your preferred font
                                size: 12,        // Font size
                                color: '#274052' // Font color
                            }
                        }
                    }
                }
            }
        });
    });
</script>
