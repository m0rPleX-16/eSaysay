@using eSaysay.Models.Entities;
@model List<InteractiveExercise>

@{
    ViewData["Title"] = "Archived Exercises";
}

<main class="archive-page-exercises">
    @await Html.PartialAsync("_AdminSidebar")

    <div class="archive-page-exercises-content">
        <div class="archive-exercises-topbar d-flex justify-content-between">
            <h2>Archived <span class="archive-exercises-dashboard">exercises</span></h2>
            <a asp-controller="Admin" asp-action="Exercises" class="btn exit-admin-archive-exercises">
                <span class="material-symbols-rounded">close</span>
            </a>
        </div>

        <!-- Search Bar -->
        <div class="exercises-searchbar mb-3">
            <input type="text" id="exerciseSearchInput" class="form-control" placeholder="Search by archived exercises..." value="@ViewBag.Search">
        </div>

        <!-- Exercises Table -->
        <div class="table-responsive" id="exercisesArchiveTableContainer">
            <table class="table table-exercises-archive-content">
                <thead class="table-dark">
                    <tr>
                        <th class="col-3">Exercise Type</th>
                        <th class="col-4">Content</th>
                        <th class="col-2">Lesson</th>
                        <th class="col-1">Difficulty</th>
                        <th class="col-2 text-center">Actions</th>
                    </tr>
                </thead>
                <tbody id="exercisesTableBody">
                    @if (Model.Any())
                    {
                        @foreach (var exercise in Model)
                        {
                            <tr id="exerciseRow_@exercise.ExerciseID">
                                <td>@exercise.ExerciseType</td>
                                <td>@exercise.Content</td>
                                <td>@exercise.Lesson.Title</td>
                                <td>@exercise.DifficultyLevel</td>
                                <td class="text-center">
                                    <!-- Restore Button -->
                                    <form class="restore-form d-inline" data-id="@exercise.ExerciseID">
                                        @Html.AntiForgeryToken()
                                        <button type="submit" class="btn btn-archive-exercises-restore" data-bs-toggle="tooltip"
                                                data-bs-placement="right"
                                                title="Restore">
                                            <span class="material-symbols-rounded">settings_backup_restore</span>
                                        </button>
                                    </form>
                                    <!-- Delete Button -->
                                    <form class="delete-form d-inline" data-id="@exercise.ExerciseID">
                                        @Html.AntiForgeryToken()
                                        <button type="submit" class="btn btn-archive-exercises-delete" data-bs-toggle="tooltip"
                                                data-bs-placement="right"
                                                title="Delete">
                                            <span class="material-symbols-rounded">delete</span>
                                        </button>
                                    </form>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="5" class="text-center text-muted">No archived exercises found.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Pagination -->
        <div class="exercises-pagination text-center mt-3">
            @if (ViewBag.TotalPages > 1)
            {
                <nav aria-label="Page navigation">
                    <ul class="pagination justify-content-center">
                        @if (ViewBag.CurrentPage > 1)
                        {
                            <li class="page-item">
                                <a href="#" class="page-link pagination-link" data-page="@(ViewBag.CurrentPage - 1)">Previous</a>
                            </li>
                        }
                        @{
                            int startPage = Math.Max(1, ViewBag.CurrentPage - 2);
                            int endPage = Math.Min(ViewBag.TotalPages, ViewBag.CurrentPage + 2);

                            if (startPage > 1)
                            {
                                <li class="page-item"><a href="#" class="page-link pagination-link" data-page="1">1</a></li>
                                if (startPage > 2)
                                {
                                    <li class="page-item disabled"><span class="page-link">...</span></li>
                                }
                            }

                            for (int i = startPage; i <= endPage; i++)
                            {
                                <li class="page-item @(i == ViewBag.CurrentPage ? "active" : "")">
                                    <a href="#" class="page-link pagination-link" data-page="@i">@i</a>
                                </li>
                            }

                            if (endPage < ViewBag.TotalPages)
                            {
                                if (endPage < ViewBag.TotalPages - 1)
                                {
                                    <li class="page-item disabled"><span class="page-link">...</span></li>
                                }
                                <li class="page-item">
                                    <a href="#" class="page-link pagination-link" data-page="@ViewBag.TotalPages">@ViewBag.TotalPages</a>
                                </li>
                            }
                        }
                        @if (ViewBag.CurrentPage < ViewBag.TotalPages)
                        {
                            <li class="page-item">
                                <a href="#" class="page-link pagination-link" data-page="@(ViewBag.CurrentPage + 1)">Next</a>
                            </li>
                        }
                    </ul>
                </nav>
            }
        </div>

        <!-- Toast Notifications -->
        <div aria-live="polite" aria-atomic="true" class="position-fixed bottom-0 end-0 p-3">
            <div id="toastContainer"></div>
        </div>
    </div>

    @section Scripts {
        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
        <script>
            $(document).ready(function () {
                $('[data-bs-toggle="tooltip"]').tooltip();

                function showToast(message, type = 'success') {
                    const toastId = `toast-${Date.now()}`;
                    const toastHtml = `
                        <div id="${toastId}" class="toast align-items-center text-white bg-${type} border-0" role="alert" aria-live="assertive" aria-atomic="true">
                            <div class="d-flex">
                                <div class="toast-body">${message}</div>
                                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                            </div>
                        </div>`;
                    $("#toastContainer").append(toastHtml);
                    const toastElement = new bootstrap.Toast(document.getElementById(toastId));
                    toastElement.show();

                    setTimeout(() => {
                        $(`#${toastId}`).remove();
                    }, 4000);
                }

                function loadExercises(page = 1) {
                    const searchQuery = $('#exerciseSearchInput').val();
                    $.ajax({
                        url: '/Admin/ArchivedExercises',
                        type: 'GET',
                        data: { searchQuery: searchQuery, page: page },
                        success: function (response) {
                            const newTableContent = $(response).find("#exercisesTableBody").html();
                            $("#exercisesTableBody").html(newTableContent);

                            const paginationHtml = $(response).find('.exercises-pagination').html();
                            $('.exercises-pagination').html(paginationHtml);
                        },
                        error: function (xhr, status, error) {
                            console.error('Error loading exercises:', error);
                        }
                    });
                }

                let timeoutId;
                $('#exerciseSearchInput').on('input', function () {
                    clearTimeout(timeoutId);
                    timeoutId = setTimeout(() => {
                        loadExercises();
                    }, 300);
                });

                $(document).on('click', '.pagination-link', function (e) {
                    e.preventDefault();
                    loadExercises($(this).data('page'));
                });

                $(document).on('submit', '.restore-form', function (e) {
                    e.preventDefault();
                    if (confirm("Are you sure you want to restore this exercise?")) {
                        const exerciseId = $(this).data('id');
                        const token = $('input[name="__RequestVerificationToken"]', this).val();

                        $.ajax({
                            url: '/Admin/RestoreExercise',
                            type: 'POST',
                            data: { ExerciseID: exerciseId, __RequestVerificationToken: token },
                            success: function () {
                                $(`#exerciseRow_${exerciseId}`).remove();
                                showToast("✅ Exercise successfully restored!");
                            },
                            error: function (xhr, status, error) {
                                console.error('Error restoring exercise:', error);
                                showToast("❌ Error restoring exercise!", 'danger');
                            }
                        });
                    }
                });

                $(document).on('submit', '.delete-form', function (e) {
                    e.preventDefault();
                    if (confirm("⚠️ This action is permanent! Are you sure you want to delete this exercise?")) {
                        const exerciseId = $(this).data('id');
                        const token = $('input[name="__RequestVerificationToken"]', this).val();

                        $.ajax({
                            url: '/Admin/DeleteExercisePermanent',
                            type: 'POST',
                            data: { ExerciseID: exerciseId, __RequestVerificationToken: token },
                            success: function () {
                                $(`#exerciseRow_${exerciseId}`).remove();
                                showToast("🗑️ Exercise permanently deleted!", 'warning');
                            },
                            error: function (xhr, status, error) {
                                console.error('Error deleting exercise:', error);
                                showToast("❌ Error deleting exercise!", 'danger');
                            }
                        });
                    }
                });
            });
        </script>
    }
</main>