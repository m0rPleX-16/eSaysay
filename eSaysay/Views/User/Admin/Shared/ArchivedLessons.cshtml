﻿@using eSaysay.Models.Entities;
@model List<Lesson>

@{
    ViewData["Title"] = "Archived Lessons";
}

<main class="archive-page-lessons">
    @await Html.PartialAsync("_AdminSidebar")

    <div class="archive-page-lessons-content">
        <div class="archive-lessons-topbar d-flex justify-content-between">
            <h2>Archived <span class="archive-lessons-dashboard">lessons</span></h2>
            <a asp-controller="Admin" asp-action="Lessons" class="btn exit-admin-archive-lessons">
                <span class="material-symbols-rounded">
                    close
                </span>
            </a>
        </div>

        <!-- Search Bar -->
        <div class="lessons-searchbar mb-3">
            <input type="text" id="lessonSearchInput" class="form-control" placeholder="Search by archived lessons..." value="@ViewBag.Search">
        </div>

        <!-- Lessons Table -->
        <div class="table-responsive" id="lessonsArchiveTableContainer">
            <table class="table table-lessons-archive-content">
                <thead class="table-dark">
                    <tr>
                        <th class="col-4">Title</th>
                        <th class="col-2">Lesson Type</th>
                        <th class="col-2">Difficulty</th>
                        <th class="col-2">Language</th>
                        <th class="col-2 text-center">Actions</th>
                    </tr>
                </thead>
                <tbody id="lessonsTableBody">
                    @if (Model.Any())
                    {
                        @foreach (var lesson in Model)
                        {
                            <tr id="lessonRow_@lesson.LessonID">
                                <td>@lesson.Title</td>
                                <td>@lesson.LessonType</td>
                                <td>@lesson.DifficultyLevel</td>
                                <td>@lesson.Language.LanguageName</td>
                                <td class="text-center">
                                    <form class="restore-form d-inline" data-id="@lesson.LessonID">
                                        @Html.AntiForgeryToken()
                                        <button type="submit" class="btn btn-archive-lessons-restore" data-bs-toggle="tooltip"
                                                data-bs-placement="right"
                                                title="Restore">
                                            <span class="material-symbols-rounded">
                                                settings_backup_restore
                                            </span>
                                        </button>
                                    </form>
                                    <form class="delete-form d-inline" data-id="@lesson.LessonID">
                                        @Html.AntiForgeryToken()
                                        <button type="submit" class="btn btn-archive-lessons-delete" data-bs-toggle="tooltip"
                                                data-bs-placement="right"
                                                title="Delete">
                                            <span class="material-symbols-rounded">
                                                delete
                                            </span>
                                        </button>
                                    </form>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="5" class="text-center text-muted">No archived lessons found.</td>

                        </tr>
                    }
                </tbody>
            </table>

            <!-- Pagination -->
            <div class="lesson-pagination text-center mt-3">
                @if (ViewBag.TotalPages > 1)
                {
                    <nav aria-label="Page navigation">
                        <ul class="pagination justify-content-center">

                            @if (ViewBag.CurrentPage > 1)
                            {
                                <li class="page-item">
                                    <a href="#" class="page-link pagination-link" data-page="@(ViewBag.CurrentPage - 1)">Previous</a>
                                </li>
                            }

                            @{
                                int startPage = Math.Max(1, ViewBag.CurrentPage - 2);
                                int endPage = Math.Min(ViewBag.TotalPages, ViewBag.CurrentPage + 2);

                                if (startPage > 1)
                                {
                                    <li class="page-item"><a href="#" class="page-link pagination-link" data-page="1">1</a></li>
                                    if (startPage > 2)
                                    {
                                        <li class="page-item disabled"><span class="page-link">...</span></li>
                                    }
                                }

                                for (int i = startPage; i <= endPage; i++)
                                {
                                    <li class="page-item @(i == ViewBag.CurrentPage ? "active" : "")">
                                        <a href="#" class="page-link pagination-link" data-page="@i">@i</a>
                                    </li>
                                }

                                if (endPage < ViewBag.TotalPages)
                                {
                                    if (endPage < ViewBag.TotalPages - 1)
                                    {
                                        <li class="page-item disabled"><span class="page-link">...</span></li>
                                    }
                                    <li class="page-item">
                                        <a href="#" class="page-link pagination-link" data-page="@ViewBag.TotalPages">@ViewBag.TotalPages</a>
                                    </li>
                                }
                            }

                            @if (ViewBag.CurrentPage < ViewBag.TotalPages)
                            {
                                <li class="page-item">
                                    <a href="#" class="page-link pagination-link" data-page="@(ViewBag.CurrentPage + 1)">Next</a>
                                </li>
                            }
                        </ul>
                    </nav>
                }
            </div>
        </div>

        <!-- Toast Notifications -->
        <div aria-live="polite" aria-atomic="true" class="position-fixed bottom-0 end-0 p-3">
            <div id="toastContainer"></div>
        </div>

    </div>



    @section Scripts {
        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
        <script>
            $(document).ready(function () {

                $('[data-bs-toggle="tooltip"]').tooltip();

                function showToast(message, type = 'success') {
                    const toastId = `toast-${Date.now()}`;
                    const toastHtml = `
                        <div id="${toastId}" class="toast align-items-center text-white bg-${type} border-0" role="alert" aria-live="assertive" aria-atomic="true">
                            <div class="d-flex">
                                <div class="toast-body">${message}</div>
                                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                            </div>
                        </div>`;

                    $("#toastContainer").append(toastHtml);
                    const toastElement = new bootstrap.Toast(document.getElementById(toastId));
                    toastElement.show();

                    setTimeout(() => {
                        $(`#${toastId}`).remove();
                    }, 4000);
                }

                function loadLessons(page = 1) {
                    const searchQuery = $('#lessonSearchInput').val();
                    $.ajax({
                        url: '/Admin/ArchivedLessons',
                        type: 'GET',
                        data: { searchQuery: searchQuery, page: page },
                        success: function (response) {
                            const newTableContent = $(response).find("#lessonsTableBody").html();
                            $("#lessonsTableBody").html(newTableContent);

                            const paginationHtml = $(response).find('.lesson-pagination').html();
                            $('.lesson-pagination').html(paginationHtml);
                        },
                        error: function (xhr, status, error) {
                            console.error('Error loading lessons:', error);
                        }
                    });
                }

                let timeoutId;
                $('#lessonSearchInput').on('input', function () {
                    clearTimeout(timeoutId);
                    timeoutId = setTimeout(() => {
                        loadLessons();
                    }, 300);
                });

                $(document).on('click', '.pagination-link', function (e) {
                    e.preventDefault();
                    loadLessons($(this).data('page'));
                });

                            $(document).on('submit', '.restore-form', function (e) {
                e.preventDefault();
                if (confirm("Are you sure you want to restore this lesson?")) {
                    const lessonId = $(this).data('id');
                    const token = $('input[name="__RequestVerificationToken"]', this).val();

                    $.ajax({
                        url: '/Admin/RestoreLesson',
                        type: 'POST',
                        data: { LessonID: lessonId, __RequestVerificationToken: token },
                        success: function () {
                            $(`#lessonRow_${lessonId}`).remove();
                            showToast("✅ Lesson successfully restored!");
                        },
                        error: function (xhr, status, error) {
                            console.error('Error restoring lesson:', error);
                            showToast("❌ Error restoring lesson!", 'danger');
                        }
                    });
                }
            });

            $(document).on('submit', '.delete-form', function (e) {
                e.preventDefault();
                if (confirm("⚠️ This action is permanent! Are you sure you want to delete this lesson?")) {
                    const lessonId = $(this).data('id');
                    const token = $('input[name="__RequestVerificationToken"]', this).val();

                    $.ajax({
                        url: '/Admin/DeleteLessonPermanently',
                        type: 'POST',
                        data: { LessonID: lessonId, __RequestVerificationToken: token },
                        success: function () {
                            $(`#lessonRow_${lessonId}`).remove();
                            showToast("🗑️ Lesson permanently deleted!", 'warning');
                        },
                        error: function (xhr, status, error) {
                            console.error('Error deleting lesson:', error);
                            showToast("❌ Error deleting lesson!", 'danger');
                        }
                    });
                }
            });
            });
        </script>
    }
</main>
KD