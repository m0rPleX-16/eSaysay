@using Microsoft.AspNetCore.Identity
@using eSaysay.Models.Entities
@model List<Language>

@{
    ViewData["Title"] = "Archived Languages";
}

<main class="archive-page-languages">
    @await Html.PartialAsync("_AdminSidebar")

    <div class="archive-page-languages-content">
        <div class="archive-languages-topbar d-flex justify-content-between">
            <h2>Archived <span class="archive-languages-dashboard">languages</span></h2>
            <a asp-controller="Admin" asp-action="Language" class="btn exit-admin-archive-languages">
                <span class="material-symbols-rounded">
                    close
                </span>
            </a>
        </div>

        <!-- Search Bar -->
        <div class="languages-searchbar mb-3">
            <input type="text" id="languageSearchInput" class="form-control languages-archive-search" placeholder="Search archived languages..." value="@ViewBag.Search">
        </div>

        <!-- Languages Table -->
        <div class="table-responsive" id="languagesArchiveTableContainer">
            <table class="table table-languages-archive-content">
                <thead>
                    <tr>
                        <th>Language Name</th>
                        <th class="text-center">Actions</th>
                    </tr>
                </thead>
                <tbody id="languagesTableBody">
                    @if (Model.Any())
                    {
                        @foreach (var language in Model)
                        {
                            <tr id="languageRow_@language.LanguageID">
                                <td>@language.LanguageName</td>
                                <td class="text-center">
                                    <form class="restore-form d-inline" data-id="@language.LanguageID">
                                      @Html.AntiForgeryToken()
                                        <input type="hidden" name="LanguageID" value="@language.LanguageID" />
                                        <button type="submit" class="btn btn-archive-languages-restore">
                                            <span class="material-symbols-rounded">
                                                settings_backup_restore
                                            </span>
                                        </button>
                                    </form>
                                    <form class="delete-form d-inline" data-id="@language.LanguageID">
                                      @Html.AntiForgeryToken()
                                        <input type="hidden" name="LanguageID" value="@language.LanguageID" />
                                        <button type="submit" class="btn btn-archive-languages-delete">
                                            <span class="material-symbols-rounded">delete</span>
                                        </button>
                                    </form>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="2" class="text-center text-muted">No archived languages found.</td>

                        </tr>
                    }
                </tbody>
            </table>


            <!-- Pagination -->
            <div class="language-pagination text-center mt-3">
                @if (ViewBag.TotalPages > 1)
                {
                    <nav aria-label="Page navigation">
                        <ul class="pagination justify-content-center">

                            @if (ViewBag.CurrentPage > 1)
                            {
                                <li class="page-item">
                                    <a href="#" class="page-link pagination-link" data-page="@(ViewBag.CurrentPage - 1)">Previous</a>
                                </li>
                            }

                            @{
                                int startPage = Math.Max(1, ViewBag.CurrentPage - 2);
                                int endPage = Math.Min(ViewBag.TotalPages, ViewBag.CurrentPage + 2);

                                if (startPage > 1)
                                {
                                    <li class="page-item"><a href="#" class="page-link pagination-link" data-page="1">1</a></li>
                                    if (startPage > 2)
                                    {
                                        <li class="page-item disabled"><span class="page-link">...</span></li>
                                    }
                                }

                                for (int i = startPage; i <= endPage; i++)
                                {
                                    <li class="page-item @(i == ViewBag.CurrentPage ? "active" : "")">
                                        <a href="#" class="page-link pagination-link" data-page="@i">@i</a>
                                    </li>
                                }

                                if (endPage < ViewBag.TotalPages)
                                {
                                    if (endPage < ViewBag.TotalPages - 1)
                                    {
                                        <li class="page-item disabled"><span class="page-link">...</span></li>
                                    }
                                    <li class="page-item">
                                        <a href="#" class="page-link pagination-link" data-page="@ViewBag.TotalPages">@ViewBag.TotalPages</a>
                                    </li>
                                }
                            }

                            @if (ViewBag.CurrentPage < ViewBag.TotalPages)
                            {
                                <li class="page-item">
                                    <a href="#" class="page-link pagination-link" data-page="@(ViewBag.CurrentPage + 1)">Next</a>
                                </li>
                            }
                        </ul>
                    </nav>
                }
            </div>

        </div>

        <!-- Toast Notifications -->
        <div aria-live="polite" aria-atomic="true" class="position-fixed bottom-0 end-0 p-3">
            <div id="toastContainer"></div>
        </div>
    </div>

    @section Scripts {
        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
        <script>
            $(document).ready(function () {
                function showToast(message, type = 'success') {
                    const toastId = `toast-${Date.now()}`;
                    const toastHtml = `
                        <div id="${toastId}" class="toast align-items-center text-white bg-${type} border-0" role="alert" aria-live="assertive" aria-atomic="true">
                            <div class="d-flex">
                                <div class="toast-body">${message}</div>
                                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                            </div>
                        </div>`;

                    $("#toastContainer").append(toastHtml);
                    const toastElement = new bootstrap.Toast(document.getElementById(toastId));
                    toastElement.show();

                    setTimeout(() => {
                        $(`#${toastId}`).remove();
                    }, 4000);
                }


                function loadLanguages(page = 1) {
                const searchQuery = $('#languageSearchInput').val();
                $.ajax({
                    url: '/Admin/ArchivedLanguage',
                    type: 'GET',
                    data: { search: searchQuery, page: page },
                    success: function (response) {
                        const newTableContent = $(response).find("#languagesTableBody").html();
                        $("#languagesTableBody").html(newTableContent);

                        const paginationHtml = $(response).find('.language-pagination').html();
                        $('.language-pagination').html(paginationHtml);

                        // Update active class for pagination
                       
                    },
                    error: function (xhr, status, error) {
                        console.error('Error loading languages:', error);
                    }
                });
                }


                let timeoutId;
                $('#languageSearchInput').on('input', function () {
                    clearTimeout(timeoutId);
                    timeoutId = setTimeout(() => {
                        loadLanguages();
                    }, 300);
                });

                $(document).on('click', '.pagination-link', function (e) {
                    e.preventDefault();
                    const page = $(this).data('page');
                    loadLanguages(page);
                });

                $(document).on('submit', '.restore-form', function (e) {
                    e.preventDefault();
                    if (confirm("Are you sure you want to restore this language?")) {
                        const languageId = $(this).data('id');
                        const token = $('input[name="__RequestVerificationToken"]', this).val();

                        $.ajax({
                            url: '/Admin/RestoreLanguage',
                            type: 'POST',
                            data: { LanguageID: languageId, __RequestVerificationToken: token },
                            success: function () {
                                $(`#languageRow_${languageId}`).remove();
                                showToast("✅ Language successfully restored!");
                            },
                            error: function (xhr, status, error) {
                                console.error('Error restoring language:', error);
                                showToast("❌ Error restoring language!", 'danger');
                            }
                        });
                    }
                });

                $(document).on('submit', '.delete-form', function (e) {
                    e.preventDefault();
                    if (confirm("⚠️ This action is permanent! Are you sure you want to delete this language?")) {
                        const languageId = $(this).data('id');
                        const token = $('input[name="__RequestVerificationToken"]', this).val();

                        $.ajax({
                            url: '/Admin/DeleteLanguagePermanently',
                            type: 'POST',
                            data: { LanguageID: languageId, __RequestVerificationToken: token },
                            success: function () {
                                $(`#languageRow_${languageId}`).remove();
                                showToast("🗑️ Language permanently deleted!", 'warning');
                            },
                            error: function (xhr, status, error) {
                                console.error('Error deleting language:', error);
                                showToast("❌ Error deleting language!", 'danger');
                            }
                        });
                    }
                });
            });
        </script>
    }
</main>
