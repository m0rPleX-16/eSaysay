@using eSaysay.Models.Entities;
@model List<InteractiveExercise>

@{
    ViewData["Title"] = "Archived Exercises";
}
<main class="archived-paged-exercises">

    @await Html.PartialAsync("_AdminSidebar")

    <main class="archive-page-exercises-content">

        <div class="archive-exercises-topbar d-flex justify-content-between">
            <h2>Archived <span class="archive-exercises-dashboard">exercises</span></h2>
            <a asp-controller="Admin" asp-action="Exercises" class="btn exit-admin-archive-exercises">
                <span class="material-symbols-rounded">
                    close
                </span>
            </a>
        </div>

       

        <!-- Search Bar -->
        <div class="exercises-searchbar mb-3">
            <input type="text" id="exerciseSearchInput" class="form-control exercises-archive-search" placeholder="Search Archived Exercises..." value="@ViewBag.Search">
        </div>

        <div class="table-responsive" id="studentsArchiveTableContainer">
            <table class="table table-exercises-archive-content">
                <thead>
                    <tr>
                      <th>Exercise Type</th>
                                <th>Content</th>
                                <th>Lesson</th>
                                <th>Difficulty</th>
                                <th>Date Created</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                <tbody id="exercisesArchiveTableBody"
                        @if (Model.Any())
                        {
                            @foreach (var exercise in Model)
                            {
                                <tr>
                                    <td>@exercise.ExerciseType</td>
                                    <td>@exercise.Content</td>
                                    <td>@exercise.Lesson.Title</td>
                                    <td>@exercise.DifficultyLevel</td>
                                    <td>@exercise.DateCreated.ToShortDateString()</td>
                                    <td>
                                        <!-- Restore Button -->
                            <button class="btn btn-archive-exercises-restore" data-id="@exercise.ExerciseID">
                                            <span class="material-symbols-rounded">restore</span>
                                        </button>

                                        <!-- Delete Permanently Button -->
                            <button class="btn btn-archive-exercises-delete" data-id="@exercise.ExerciseID">
                                            <span class="material-symbols-rounded">delete</span>
                                        </button>
                                    </td>
                                </tr>
                            }
                     }
                    else
                     {
                    <tr>
                        <td colspan="6" class="text-center text-muted">No archived exercises found.</td>
                    </tr>
                     }
                </tbody>
            </table>
        </div>

            <!-- Pagination -->
            <div class="students-pagination text-center mt-3">
                    @if (ViewBag.TotalPages > 1)
                    {
                    <nav aria-label="Page navigation">
                        <ul class="pagination justify-content-center">

                                @if (ViewBag.CurrentPage > 1)
                                {
                                <li class="page-item">
                                    <a href="#" class="page-link pagination-link" data-page="@(ViewBag.CurrentPage - 1)">Previous</a>
                                </li>
                                }

                                @{
                                    int startPage = Math.Max(1, ViewBag.CurrentPage - 2);
                                    int endPage = Math.Min(ViewBag.TotalPages, ViewBag.CurrentPage + 2);

                                    if (startPage > 1)
                                    {
                                    <li class="page-item"><a href="#" class="page-link pagination-link" data-page="1">1</a></li>
                                        if (startPage > 2)
                                        {
                                        <li class="page-item disabled"><span class="page-link">...</span></li>
                                        }
                                    }

                                    for (int i = startPage; i <= endPage; i++)
                                    {
                                    <li class="page-item @(i == ViewBag.CurrentPage ? "active" : "")">
                                        <a href="#" class="page-link pagination-link" data-page="@i">@i</a>
                                    </li>
                                    }

                                    if (endPage < ViewBag.TotalPages)
                                    {
                                        if (endPage < ViewBag.TotalPages - 1)
                                        {
                                        <li class="page-item disabled"><span class="page-link">...</span></li>
                                        }
                                    <li class="page-item">
                                        <a href="#" class="page-link pagination-link" data-page="@ViewBag.TotalPages">@ViewBag.TotalPages</a>
                                    </li>
                                    }
                                }

                                @if (ViewBag.CurrentPage < ViewBag.TotalPages)
                                {
                                <li class="page-item">
                                    <a href="#" class="page-link pagination-link" data-page="@(ViewBag.CurrentPage + 1)">Next</a>
                                </li>
                                }
                        </ul>
                    </nav>
                    }
            </div>

        <!-- Toast Notification -->
        @* <div id="toastContainer" class="position-fixed top-0 end-0 p-3" style="z-index: 1050;"></div> *@
        <div aria-live="polite" aria-atomic="true" class="position-fixed bottom-0 end-0 p-3">
            <div id="toastContainer"></div>
        </div>
        

        @section Scripts {
            <script>
                $(document).ready(function () {
                    function showToast(message, type) {
                        const toastId = Date.now();
                        const toastHtml = `
                            <div id="toast-${toastId}" class="toast align-items-center text-white bg-${type} border-0" role="alert" aria-live="assertive" aria-atomic="true">
                                <div class="d-flex">
                                    <div class="toast-body">${message}</div>
                                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                                </div>
                            </div>
                        `;
                        $("#toastContainer").append(toastHtml);
                        const toastElement = new bootstrap.Toast(document.getElementById(`toast-${toastId}`));
                        toastElement.show();
                        setTimeout(() => { $(`#toast-${toastId}`).remove(); }, 4000);
                    }

                            $(document).ready(function () {
                    function loadExercises() {
                        let searchValue = $('#exerciseSearchInput').val();
                        let exerciseType = $('#exerciseTypeFilter').val();
                        let difficulty = $('#difficultyFilter').val();

                        $.ajax({
                            url: '/Admin/Exercises',
                            type: 'GET',
                            data: {
                                search: searchValue,
                                exerciseType: exerciseType,
                                difficulty: difficulty
                            },
                            success: function (data) {
                                $('#exercisesContainer').html($(data).find('#exercisesContainer').html());
                            },
                            error: function () {
                                alert('Failed to load exercises.');
                            }
                        });
                    }

                    $('#searchButton').on('click', function () {
                        loadExercises();
                    });

                    $('#exerciseSearchInput, #exerciseTypeFilter, #difficultyFilter').on('change', function () {
                        loadExercises();
                    });

                    loadExercises(); // Initial load
                });

                    function loadArchivedExercises(page = 1) {
                        const searchTerm = $('#searchInput').val();
                        $.ajax({
                            url: '/Admin/ArchivedExercises',
                            type: 'GET',
                            data: { search: searchTerm, page: page },
                            success: function (response) {
                                $('.archived-content').html($(response).find('.archived-content').html());
                            },
                            error: function (xhr, status, error) {
                                console.error('Error fetching archived exercises:', error);
                            }
                        });
                    }

                    let timeoutId;
                    $('#searchInput').on('input', function () {
                        clearTimeout(timeoutId);
                        timeoutId = setTimeout(() => {
                            loadArchivedExercises();
                        }, 300);
                    });

                    $(document).on('click', '.pagination-link', function (e) {
                        e.preventDefault();
                        const page = $(this).data('page');
                        loadArchivedExercises(page);
                    });

                    $(document).on('click', '.restore-btn', function () {
                        const exerciseID = $(this).data('id');
                        $.post('/Admin/RestoreExercise', { ExerciseID: exerciseID }, function (response) {
                            showToast("Exercise restored successfully!", "success");
                            loadArchivedExercises();
                        }).fail(function () {
                            showToast("Failed to restore exercise.", "danger");
                        });
                    });

                    $(document).on('click', '.delete-btn', function () {
                        const exerciseID = $(this).data('id');
                        if (confirm("Are you sure you want to delete this exercise permanently?")) {
                            $.post('/Admin/DeleteExercisePermanent', { ExerciseID: exerciseID }, function (response) {
                                showToast("Exercise permanently deleted!", "danger");
                                loadArchivedExercises();
                            }).fail(function () {
                                showToast("Failed to delete exercise.", "danger");
                            });
                        }
                    });
                });
            </script>
        }
    </main>

</main>