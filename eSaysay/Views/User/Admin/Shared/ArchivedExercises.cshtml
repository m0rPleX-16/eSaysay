@using eSaysay.Models.Entities;
@model List<InteractiveExercise>

@{
    ViewData["Title"] = "Archived Exercises";
}

<main class="archived-paged-exercises">
    @await Html.PartialAsync("_AdminSidebar")

    <div class="archive-page-exercises-content">
        <!-- Top Bar -->
        <div class="archive-exercises-topbar d-flex justify-content-between">
            <h2>Archived <span class="archive-exercises-dashboard">exercises</span></h2>
            <a asp-controller="Admin" asp-action="Exercises" class="btn exit-admin-archive-exercises">
                <span class="material-symbols-rounded">close</span>
            </a>
        </div>

        <!-- Search Bar -->
        <div class="exercises-searchbar mb-3">
            <input type="text" id="exerciseSearchInput" class="form-control exercises-archive-search" placeholder="Search Archived Exercises..." value="@ViewBag.Search">
        </div>

        <!-- Table -->
        <div class="table-responsive" id="studentsArchiveTableContainer">
            <table class="table table-exercises-archive-content">
                <thead>
                    <tr>
                        <th>Exercise Type</th>
                        <th>Content</th>
                        <th>Lesson</th>
                        <th>Difficulty</th>
                        <th>Date Created</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="exercisesArchiveTableBody">
                    @if (Model.Any())
                    {
                        foreach (var exercise in Model)
                        {
                            <tr>
                                <td>@exercise.ExerciseType</td>
                                <td>@exercise.Content</td>
                                <td>@exercise.Lesson.Title</td>
                                <td>@exercise.DifficultyLevel</td>
                                <td>@exercise.DateCreated.ToShortDateString()</td>
                                <td>
                                    <!-- Restore Button -->
                                    <form method="post" action="/Admin/RestoreExercise" class="d-inline restore-form" data-id="@exercise.ExerciseID">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="ExerciseID" value="@exercise.ExerciseID" />
                                        <button type="submit" class="btn btn-archive-exercises-restore">
                                            <span class="material-symbols-rounded">restore</span>
                                        </button>
                                    </form>

                                    <!-- Delete Permanently Button -->
                                    <form method="post" action="/Admin/DeleteExercisePermanent" class="d-inline delete-form" data-id="@exercise.ExerciseID">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="ExerciseID" value="@exercise.ExerciseID" />
                                        <button type="submit" class="btn btn-archive-exercises-delete">
                                            <span class="material-symbols-rounded">delete</span>
                                        </button>
                                    </form>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="6" class="text-center text-muted">No archived exercises found.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Pagination -->
        <div class="students-pagination text-center mt-3">
            @if (ViewBag.TotalPages > 1)
            {
                <nav aria-label="Page navigation">
                    <ul class="pagination justify-content-center">
                        @if (ViewBag.CurrentPage > 1)
                        {
                            <li class="page-item">
                                <a href="#" class="page-link pagination-link" data-page="@(ViewBag.CurrentPage - 1)">Previous</a>
                            </li>
                        }

                        @{
                            int startPage = Math.Max(1, ViewBag.CurrentPage - 2);
                            int endPage = Math.Min(ViewBag.TotalPages, ViewBag.CurrentPage + 2);

                            if (startPage > 1)
                            {
                                <li class="page-item"><a href="#" class="page-link pagination-link" data-page="1">1</a></li>
                                if (startPage > 2)
                                {
                                    <li class="page-item disabled"><span class="page-link">...</span></li>
                                }
                            }

                            for (int i = startPage; i <= endPage; i++)
                            {
                                <li class="page-item @(i == ViewBag.CurrentPage ? "active" : "")">
                                    <a href="#" class="page-link pagination-link" data-page="@i">@i</a>
                                </li>
                            }

                            if (endPage < ViewBag.TotalPages)
                            {
                                if (endPage < ViewBag.TotalPages - 1)
                                {
                                    <li class="page-item disabled"><span class="page-link">...</span></li>
                                }
                                <li class="page-item">
                                    <a href="#" class="page-link pagination-link" data-page="@ViewBag.TotalPages">@ViewBag.TotalPages</a>
                                </li>
                            }
                        }

                        @if (ViewBag.CurrentPage < ViewBag.TotalPages)
                        {
                            <li class="page-item">
                                <a href="#" class="page-link pagination-link" data-page="@(ViewBag.CurrentPage + 1)">Next</a>
                            </li>
                        }
                    </ul>
                </nav>
            }
        </div>

        <!-- Toast Notification -->
        <div aria-live="polite" aria-atomic="true" class="position-fixed bottom-0 end-0 p-3">
            <div id="toastContainer"></div>
        </div>
    </div>
</main>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Toast Notification Function
            function showToast(message, type) {
                const toastId = Date.now();
                const toastHtml = `
                    <div id="toast-${toastId}" class="toast align-items-center text-white bg-${type} border-0" role="alert" aria-live="assertive" aria-atomic="true">
                        <div class="d-flex">
                            <div class="toast-body">${message}</div>
                            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                        </div>
                    </div>
                `;
                $("#toastContainer").append(toastHtml);
                const toastElement = new bootstrap.Toast(document.getElementById(`toast-${toastId}`));
                toastElement.show();
                setTimeout(() => { $(`#toast-${toastId}`).remove(); }, 4000);
            }

            // Handle Restore and Delete Forms via AJAX
            $(document).on('submit', '.restore-form, .delete-form', function (e) {
                e.preventDefault(); // Prevent default form submission

                const form = $(this);
                const url = form.attr('action');
                const method = form.attr('method');
                const data = form.serialize();

                $.ajax({
                    url: url,
                    type: method,
                    data: data,
                    success: function (response) {
                        if (url.includes("RestoreExercise")) {
                            showToast("Exercise restored successfully!", "success");
                        } else if (url.includes("DeleteExercisePermanent")) {
                            showToast("Exercise permanently deleted!", "danger");
                        }
                        loadArchivedExercises(); // Reload the table
                    },
                    error: function () {
                        showToast("Failed to perform action.", "danger");
                    }
                });
            });

            // Load Archived Exercises
            function loadArchivedExercises(page = 1) {
                const searchTerm = $('#exerciseSearchInput').val();
                $.ajax({
                    url: '/Admin/ArchivedExercises',
                    type: 'GET',
                    data: { search: searchTerm, page: page },
                    success: function (response) {
                        $('#studentsArchiveTableContainer').html($(response).find('#studentsArchiveTableContainer').html());
                    },
                    error: function (xhr, status, error) {
                        console.error('Error fetching archived exercises:', error);
                    }
                });
            }

            // Pagination Click Handler
            $(document).on('click', '.pagination-link', function (e) {
                e.preventDefault();
                const page = $(this).data('page');
                loadArchivedExercises(page);
            });

            // Search Input Handler
            let timeoutId;
            $('#exerciseSearchInput').on('input', function () {
                clearTimeout(timeoutId);
                timeoutId = setTimeout(() => {
                    loadArchivedExercises();
                }, 300);
            });
        });
    </script>
}